const express = require('express');
const bcrypt = require('bcrypt');
const crypto = require('crypto');

const app = express();
app.use(express.json());

// Simple in-memory user "database"
let users = {};

// Create Account
app.post('/api/register', async (req, res) => {
  const { username, password, email } = req.body;
  if (users[username]) return res.status(400).json({ error: 'User exists' });
  const passwordHash = await bcrypt.hash(password, 10);
  users[username] = {
    username,
    email,
    passwordHash,
    isAdmin: username === 'Puabo20'
  };
  res.json({ message: 'Account created', isAdmin: users[username].isAdmin });
});

// Login
app.post('/api/login', async (req, res) => {
  const { username, password } = req.body;
  const user = users[username];
  if (!user || !(await bcrypt.compare(password, user.passwordHash))) {
    return res.status(401).json({ error: 'Invalid credentials' });
  }
  res.json({ message: 'Login successful', isAdmin: user.isAdmin });
});

// Forgot Password (request reset token)
app.post('/api/forgot-password', (req, res) => {
  const { username } = req.body;
  const user = users[username];
  if (!user) return res.status(404).json({ error: 'User not found' });
  user.resetToken = crypto.randomBytes(20).toString('hex');
  res.json({ message: 'Reset token created', token: user.resetToken });
});

// Reset Password (set new password using token)
app.post('/api/reset-password', async (req, res) => {
  const { username, token, newPassword } = req.body;
  const user = users[username];
  if (!user || user.resetToken !== token) {
    return res.status(400).json({ error: 'Invalid token' });
  }
  user.passwordHash = await bcrypt.hash(newPassword, 10);
  delete user.resetToken;
  res.json({ message: 'Password reset' });
});

module.exports = app;
